// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://jofuqlexuxzamltxxzuq.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpvZnVxbGV4dXh6YW1sdHh4enVxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDkxMDA2NjAsImV4cCI6MjA2NDY3NjY2MH0.Fq_Sx7NUeZF2k-erwrj_V-2npReXum9Cmuufsco3Cmw";

/**
 * Check Supabase availability without requiring SELECT permissions
 * Uses Auth health endpoint and REST OPTIONS fallback
 */
export const checkSupabaseAvailability = async (timeoutMs = 5000): Promise<boolean> => {
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), timeoutMs);

    // Primary: Check Supabase Auth health endpoint (does not require auth)
    const healthResp = await fetch(`${SUPABASE_URL}/auth/v1/health`, {
      method: 'GET',
      signal: controller.signal,
      cache: 'no-cache',
    });

    if (healthResp.ok) {
      clearTimeout(timeoutId);
      console.log('Supabase Auth health check: SUCCESS');
      return true;
    }

    // Fallback: Use REST endpoint preflight (OPTIONS) that shouldn't require SELECT permissions
    const restController = new AbortController();
    const restTimeoutId = setTimeout(() => restController.abort(), timeoutMs);

    const restResp = await fetch(`${SUPABASE_URL}/rest/v1/`, {
      method: 'OPTIONS',
      signal: restController.signal,
      cache: 'no-cache',
      headers: {
        'apikey': SUPABASE_PUBLISHABLE_KEY,
        'Authorization': `Bearer ${SUPABASE_PUBLISHABLE_KEY}`
      }
    });

    clearTimeout(restTimeoutId);
    const isConnected = restResp.ok;
    console.log(`Supabase REST preflight connectivity: ${isConnected ? 'SUCCESS' : 'FAILED'} (status: ${restResp.status})`);
    return isConnected;
  } catch (error) {
    console.error('Supabase availability check failed:', error);
    return false;
  }
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);
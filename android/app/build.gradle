apply plugin: 'com.android.application'

android {
    namespace "com.miahealthcare.consentform"
    compileSdk rootProject.ext.compileSdkVersion

    // Signing config via environment variables or Gradle properties (no secrets in repo)
    def ANDROID_KEYSTORE_FILE = System.getenv("ANDROID_KEYSTORE_FILE") ?: (project.hasProperty("ANDROID_KEYSTORE_FILE") ? project.getProperties()["ANDROID_KEYSTORE_FILE"] : null)
    def ANDROID_KEYSTORE_PASSWORD = System.getenv("ANDROID_KEYSTORE_PASSWORD") ?: (project.hasProperty("ANDROID_KEYSTORE_PASSWORD") ? project.getProperties()["ANDROID_KEYSTORE_PASSWORD"] : null)
    def ANDROID_KEY_ALIAS = System.getenv("ANDROID_KEY_ALIAS") ?: (project.hasProperty("ANDROID_KEY_ALIAS") ? project.getProperties()["ANDROID_KEY_ALIAS"] : null)
    def ANDROID_KEY_PASSWORD = System.getenv("ANDROID_KEY_PASSWORD") ?: (project.hasProperty("ANDROID_KEY_PASSWORD") ? project.getProperties()["ANDROID_KEY_PASSWORD"] : null)

    defaultConfig {
        applicationId "com.miahealthcare.consentform"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
             // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
             // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }

    signingConfigs {
        release {
            if (ANDROID_KEYSTORE_FILE && ANDROID_KEYSTORE_PASSWORD && ANDROID_KEY_ALIAS && ANDROID_KEY_PASSWORD) {
                storeFile file(ANDROID_KEYSTORE_FILE)
                storePassword ANDROID_KEYSTORE_PASSWORD
                keyAlias ANDROID_KEY_ALIAS
                keyPassword ANDROID_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (ANDROID_KEYSTORE_FILE && ANDROID_KEYSTORE_PASSWORD && ANDROID_KEY_ALIAS && ANDROID_KEY_PASSWORD) {
                signingConfig signingConfigs.release
            } else {
                logger.lifecycle("Release signing not configured. Set ANDROID_KEYSTORE_FILE, ANDROID_KEYSTORE_PASSWORD, ANDROID_KEY_ALIAS, ANDROID_KEY_PASSWORD to sign.")
            }
        }
    }
}


repositories {
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    implementation project(':capacitor-cordova-android-plugins')
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
